syntax = "proto3";

package bb.deskriptor.v1alpha;

service DeskriptorService {
  rpc Derive(DeriveRequest) returns (DeriveResponse);
}

message DeriveRequest {
  // The input given to the script type. For the time being only supports
  // single xpubs.
  string input = 1;

  // The address index to generate for.
  uint32 index = 2;

  // The kind of address to generate. Required field.
  ScriptType script_type = 3;

  // Generate an address on the change derivation path. Defaults to false,
  // which means we generate for the external derivation path.
  bool change = 4;
}

message DeriveResponse {
  string address = 1;

  // For some reason this is not included in the returned address info from BDK.
  // Perhaps we're using the API in a strange way?
  reserved 'index';
  reserved 2;

  // The descriptor used for deriving the address. Not called 'descriptor' as
  // that interops poorly with some languages.
  string desc = 3;
}

enum ScriptType {
  SCRIPT_TYPE_UNSPECIFIED = 0;

  // Witness pay-to-pubkey-hash. Corresponds to BIP84.
  SCRIPT_TYPE_WPKH = 1;

  // Pay-to-pubkey-hash. Corresponds to BIP44.
  SCRIPT_TYPE_PKH = 2;

  // Witness pay-to-pubkey-hash nested in P2SH. Corresponds to BIP 49
  SCRIPT_TYPE_WPKH_NESTED = 3;
}

// This is included in the details section of an error returned from derivation.
message Error {
  ErrorCode error = 1;
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;

  // The supplied xpub was invalid.
  ERROR_CODE_INVALID_XPUB = 1;

  // The supplied ypub was invalid.
  ERROR_CODE_INVALID_YPUB = 3;

  // The supplied zpub was invalid.
  ERROR_CODE_INVALID_ZPUB = 4;

  ERROR_CODE_UNSUPPORTED_INPUT = 2;
}
